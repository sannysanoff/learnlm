# LearnLM Client-Server Protocol Documentation

This document describes the communication protocol between LearnLM Flutter client and Python server. All interactions use JSON for data exchange.

## WebSocket Protocol

WebSocket connection URL: `ws://hostname:8035/api/chat/completion/stream`

### 1. Client-to-Server Requests

#### 1.1 Chat Completion Request

Used to request a streaming chat completion.

```json
{
  "history": {
    "messages": [
      {
        "role": "user",
        "content": "User message 1"
      },
      {
        "role": "assistant",
        "content": "Assistant response 1"
      },
      {
        "role": "user",
        "content": "Current user message"
      }
    ]
  },
  "temperature": 0.7,
  "top_p": 0.95,
  "top_k": 64,
  "max_tokens": 4096,
  "user_secret": "user-uuid-here",
  "chat_id": 123,
  "title": "Chat title"
}
```

- `history`: Object containing messages array
- `messages`: Array of previous messages in the conversation
- `temperature`, `top_p`, `top_k`, `max_tokens`: LLM generation parameters
- `user_secret`: Client-generated UUID to identify the user
- `chat_id`: Optional ID for existing chats (omit for new chats)
- `title`: Optional chat title (required for new chats)

#### 1.2 Save Chat Command

Used to save a chat to the database.

```json
{
  "command": "save_chat",
  "data": {
    "user_secret": "user-uuid-here",
    "chat_id": 123,
    "title": "Chat title",
    "history": {
      "messages": [
        {
          "role": "user",
          "content": "User message"
        },
        {
          "role": "assistant",
          "content": "Assistant response"
        }
      ]
    }
  }
}
```

#### 1.3 Update Title Command

Used to update a chat title.

```json
{
  "command": "update_title",
  "data": {
    "user_secret": "user-uuid-here",
    "chat_id": 123,
    "title": "New chat title"
  }
}
```

### 2. Server-to-Client Responses

#### 2.1 Streaming Response Chunks

Sent during streaming text generation.

```json
{
  "chunk": "Text chunk from LLM",
  "status": "streaming"
}
```

#### 2.2 Completion Response

Sent when streaming is complete.

```json
{
  "status": "complete",
  "id": 123
}
```

- `id`: Optional chat ID if the chat was saved

#### 2.3 Error Response

Sent when an error occurs.

```json
{
  "status": "error",
  "message": "Error description"
}
```

#### 2.4 Chat Saved Response

Sent when a chat has been saved.

```json
{
  "status": "saved",
  "id": 123,
  "title": "Chat title"
}
```

#### 2.5 Title Updated Response

Sent when a chat title has been updated.

```json
{
  "status": "title_updated",
  "id": 123,
  "title": "New chat title",
  "updated_at": "2025-03-16T12:34:56.789Z"
}
```

#### 2.6 Title Recommendation Response

Sent when a title recommendation is generated.

```json
{
  "status": "title_recommendation",
  "chat_id": 123,
  "recommended_title": "Recommended title",
  "title_updated": true,
  "updated_at": "2025-03-16T12:34:56.789Z"
}
```

- `title_updated`: Boolean indicating if the title was already saved to the database

## REST API Endpoints

Base URL: `http://hostname:8035`

### 1. List Chats

Lists all chats for a user.

- **URL**: `/api/chats`
- **Method**: GET
- **Query Parameters**: `user_secret` (required)
- **Response**:
  ```json
  [
    {
      "id": 123,
      "title": "Chat title",
      "created_at": "2025-03-16T12:34:56.789Z",
      "updated_at": "2025-03-16T12:34:56.789Z"
    }
  ]
  ```

### 2. Get Chat

Retrieves a specific chat.

- **URL**: `/api/chats/{chat_id}`
- **Method**: GET
- **Query Parameters**: `user_secret` (required)
- **Response**:
  ```json
  {
    "id": 123,
    "title": "Chat title",
    "messages": [
      {
        "role": "user",
        "content": "User message",
        "timestamp": "2025-03-16T12:34:56.789Z"
      },
      {
        "role": "assistant",
        "content": "Assistant response",
        "timestamp": "2025-03-16T12:34:56.789Z"
      }
    ],
    "created_at": "2025-03-16T12:34:56.789Z",
    "updated_at": "2025-03-16T12:34:56.789Z"
  }
  ```

### 3. Create Chat

Creates a new chat.

- **URL**: `/api/chats`
- **Method**: POST
- **Request Body**:
  ```json
  {
    "user_secret": "user-uuid-here",
    "title": "Chat title",
    "history": {
      "messages": [
        {
          "role": "user",
          "content": "User message"
        },
        {
          "role": "assistant",
          "content": "Assistant response"
        }
      ]
    }
  }
  ```
- **Response**:
  ```json
  {
    "id": 123,
    "title": "Chat title",
    "status": "success"
  }
  ```

### 4. Update Chat Title

Updates a chat title.

- **URL**: `/api/chats/{chat_id}/title`
- **Method**: PUT
- **Query Parameters**: 
  - `user_secret` (required)
  - `title` (required)
- **Response**:
  ```json
  {
    "status": "success",
    "id": 123,
    "title": "New chat title",
    "updated_at": "2025-03-16T12:34:56.789Z"
  }
  ```

### 5. Delete Chat

Deletes a chat.

- **URL**: `/api/chats/{chat_id}`
- **Method**: DELETE
- **Query Parameters**: `user_secret` (required)
- **Response**: No content (204)

## Important Notes

1. **System Messages**:
   - System messages are never exposed to clients
   - System messages are handled internally on the server
   - All server responses exclude system messages

2. **Character Encoding**:
   - All JSON encoding uses UTF-8 with `ensure_ascii=False`
   - Include proper headers when handling REST requests:
     ```
     'Accept': 'application/json; charset=utf-8'
     'Content-Type': 'application/json; charset=utf-8'
     ```

3. **Message Structure Validation**:
   - The server validates and transforms client messages to Gemini format
   - Proper message ordering is maintained by the server
   - The client should never alter the message format

4. **Security**:
   - `user_secret` is generated client-side as a UUID
   - It must be included in all API requests
   - It acts as simple authentication to access chats

5. **Timestamps**:
   - All timestamps are in ISO 8601 format (UTC)
   - If not provided by client, server will generate timestamps